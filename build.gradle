buildscript {
    repositories {
        maven { url "https://files.minecraftforge.net/maven" }
        maven { url "https://repo.spongepowered.org/maven" }
        gradlePluginPortal()
        mavenCentral()
    }
    dependencies {
        classpath group: "net.minecraftforge.gradle", name: "ForgeGradle", version: "3.+", changing: true
        classpath "gradle.plugin.com.matthewprenger:CurseGradle:1.4.0"
        classpath "org.spongepowered:mixingradle:0.7-SNAPSHOT"
    }
}

plugins {
    id "com.matthewprenger.cursegradle" version "1.4.0"
}

def mcVersion = project.mc_version
def username = project.username
def password = project.password

apply plugin: "net.minecraftforge.gradle"
apply plugin: "org.spongepowered.mixin"
apply plugin: "eclipse"

import net.minecraftforge.gradle.common.task.SignJar

version = project.version
group = "com.stevekung.indicatia"
archivesBaseName = "Indicatia"
sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = 1.8
println("Java: " + System.getProperty("java.version") + " JVM: " + System.getProperty("java.vm.version") + "(" + System.getProperty("java.vendor") + ") Arch: " + System.getProperty("os.arch"))

minecraft {
    mappings channel: "snapshot", version: "${mcp_mapping}"
    accessTransformer file("src/main/resources/META-INF/accesstransformer.cfg")

    runs {
        client {
            workingDirectory project.file("run")
            source sourceSets.main
            args "--mixin", "mixins.indicatia.json", "--username", username, "--password", password
            jvmArgs "-Dmixin.debug.export=true", "-Dmixin.debug.verbose=true"
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${forge_version}"

    if (file("libs/SteveKunG's-Lib-${mc_version}-4.0.4-deobf.jar").exists())
    {
        compile files("libs/SteveKunG's-Lib-${mc_version}-4.0.4-deobf.jar")
        println("Use existing deobf artifact")
    }
    else
    {
        compile fg.deobf("curse.maven:SteveKunGs-Lib-296019:${stevekung_lib_deobf}")
        println("Use CurseForge deobf artifact")
    }
}

repositories {
    maven {
        name "CurseGradle"
        url "https://plugins.gradle.org/m2/"
    }
    maven {
        name "CurseMaven"
        url "https://www.cursemaven.com/"
    }
}

sourceSets {
    main {
        ext.refMap = "mixins.indicatia.refmap.json"
    }
}

jar {
    manifest {
        attributes([
            "MixinConfigs": "mixins.indicatia.json",
            "Implementation-Title": "${archivesBaseName}",
            "Implementation-Version": "${version}",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
    baseName = "Indicatia-" + mcVersion
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    baseName = "Indicatia-" + mcVersion
    classifier = "sources"
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    manifest {
        attributes([
            "MixinConfigs": "mixins.indicatia.json",
            "Implementation-Title": "${archivesBaseName}",
            "Implementation-Version": "${version}",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
    baseName = "Indicatia-" + mcVersion
    classifier = "deobf"
}

artifacts {
    archives sourcesJar
    archives deobfJar
}

curseforge {
    if (project.hasProperty("upload_api_key")) {
        apiKey = project.upload_api_key
        project {
            id = "272146"
            changelog = file("CHANGE_LOG.md")
            changelogType = "markdown"
            releaseType = "release"
            addGameVersion mcVersion
    
            mainArtifact(jar) {
                displayName = "Indicatia-" + mcVersion + "-" + version
                relations {
                    requiredLibrary "stevekungs-lib"
                }
            }
            addArtifact sourcesJar
            addArtifact deobfJar
        }
    }
}

task signJar(type: SignJar, dependsOn: jar) {
    if (project.hasProperty("upload_api_key")) {
        keyStore = project.keystore_path
        alias = project.alias
        storePass = project.keystore_pass
        keyPass = project.keystore_pass
        inputFile = jar.archivePath
        outputFile = jar.archivePath
    }
}

build.dependsOn signJar
tasks.curseforge.dependsOn(build)